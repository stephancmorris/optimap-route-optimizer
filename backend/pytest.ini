[pytest]
# Pytest configuration for OptiMap backend

# Test discovery patterns
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test paths
testpaths = tests

# Output options
addopts =
    # Verbose output
    -v
    # Show summary of all test outcomes
    -ra
    # Show local variables in tracebacks
    --showlocals
    # Coverage options
    --cov=app
    --cov-report=html
    --cov-report=term-missing
    --cov-report=xml
    # Fail if coverage is below threshold
    --cov-fail-under=80
    # Show warnings
    -W default
    # Strict markers
    --strict-markers
    # Disable plugins that slow down tests
    -p no:warnings

# Coverage configuration
[coverage:run]
source = app
omit =
    */tests/*
    */test_*.py
    */__pycache__/*
    */venv/*
    */migrations/*

[coverage:report]
precision = 2
show_missing = True
skip_covered = False

exclude_lines =
    # Standard pragma
    pragma: no cover
    # Don't complain about missing debug-only code
    def __repr__
    # Don't complain if tests don't hit defensive assertion code
    raise AssertionError
    raise NotImplementedError
    # Don't complain if non-runnable code isn't run
    if __name__ == .__main__.:
    # Don't complain about abstract methods
    @abstractmethod
    # Don't complain about type checking blocks
    if TYPE_CHECKING:
    # Don't complain about protocol methods
    \.\.\.

# Markers for organizing tests
markers =
    unit: Unit tests (fast, no external dependencies)
    integration: Integration tests (may call external services)
    slow: Slow tests (> 1 second)
    api: API endpoint tests
    solver: VRP solver tests
    osrm: OSRM client tests
    models: Pydantic model tests
    requires_osrm: Tests that require OSRM service running

# Asyncio configuration
asyncio_mode = auto

# Timeout for tests (prevent hanging)
timeout = 300

# Minimum Python version
minversion = 3.11
